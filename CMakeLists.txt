CMAKE_MINIMUM_REQUIRED(VERSION 3.8)

SET(BACKEND "tbb" CACHE STRING "Threading backend; defaults to TBB")
SET(LINKAGE "none" CACHE STRING "Linkage specifying shared, static or header only implementation. Overrides BUILD_SHARED_LIBS. Defaults to header only")
SET(BUILD_TESTS FALSE CACHE BOOL "Build tests")
SET(BUILD_EXAMPLES FALSE CACHE BOOL "Build examples")

# EXTRACT VERSION FROM GIT TAGS
FIND_PACKAGE(Git)
EXECUTE_PROCESS(
    COMMAND
    ${GIT_EXECUTABLE} describe --tags --dirty 
    OUTPUT_VARIABLE VERSION
    RESULT_VARIABLE RESULT
    ERROR_VARIABLE ERROR
    OUTPUT_STRIP_TRAILING_WHITESPACE)

STRING(
    REGEX
    REPLACE
    "^(.*)?-(.*)?-(.*)?"
    "\\2"
    VERSION_TWEAK
    ${VERSION})

STRING(
    REGEX
    REPLACE
    "^(.*)?-(.*)?-(.*)?"
    "\\1"
    VERSION
    ${VERSION})

STRING(
    REGEX
    REPLACE
    "^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])$"
    "\\1"
    VERSION_MAJOR
    ${VERSION})

STRING(
    REGEX
    REPLACE
    "^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])$"
    "\\2"
    VERSION_MINOR
    ${VERSION})

STRING(
    REGEX
    REPLACE
    "^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])$"
    "\\3"
    VERSION_PATCH
    ${VERSION})

SET(VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_TWEAK}")
# EXTRACT VERSION FROM GIT TAGS

PROJECT(parallelSTL VERSION ${VERSION} LANGUAGES CXX)

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__PSTL_TEST_SUCCESSFUL_KEYWORD=1 -fopenmp-simd")

IF(LINKAGE STREQUAL "shared")
    SET(BUILD_SHARED_LIBS TRUE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__PSTL_HEADER_ONLY=0 -D__PSTL_SHARED_LINKAGE")
ELSEIF(LINKAGE STREQUAL "static")
    SET(BUILD_SHARED_LIBS FALSE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__PSTL_HEADER_ONLY=0")
ENDIF(LINKAGE STREQUAL "shared")

IF(BACKEND STREQUAL "tbb")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__PSTL_USE_TBB")
ENDIF(BACKEND STREQUAL "tbb")

IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTBB_USE_DEBUG=1")
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

INCLUDE(GNUInstallDirs)
INCLUDE(CMakePackageConfigHelpers)
INCLUDE(FindPkgConfig)

PKG_CHECK_MODULES(TBB REQUIRED tbb)

ADD_LIBRARY(${PROJECT_NAME} INTERFACE)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}
    INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} INTERFACE LIBRARY_HEADER_ONLY)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} INTERFACE ${TBB_LIBRARIES})

IF(BUILD_TESTS)
    ADD_SUBDIRECTORY(test)
ENDIF(BUILD_TESTS)

IF(BUILD_EXAMPLES)
    ADD_SUBDIRECTORY(examples)
ENDIF(BUILD_EXAMPLES)

INSTALL(
    TARGETS ${PROJECT_NAME}
    EXPORT ${PROJECT_NAME}Targets
    RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

INSTALL(
    EXPORT ${PROJECT_NAME}Targets
    FILE ${PROJECT_NAME}Targets.cmake
    NAMESPACE pstl::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/
    COMPONENT Devel)

INSTALL(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

WRITE_BASIC_PACKAGE_VERSION_FILE(
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion)

CONFIGURE_FILE(
    cmake/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake
    @ONLY)

INSTALL(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION
    ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
    COMPONENT Devel)
